#   ---------------------------------------------------------
# Work In Progress
#   ---------------------------------------------------------

function tab_title {
    echo -ne "\033]0;"$*"\007@"
    echo "Cmd: $*"
    re="^ssh.*$"
    if [[  $* =~ $re ]]
        then
                echo 'some host'
                echo -e "\033]6;1;bg;red;brightness;255\a"
        else
                echo 'localhost'
                echo -e "\033]6;1;bg;blue;brightness;255\a"
    fi
}


#   ---------------------------------------------------------
# Set Colors
#   ---------------------------------------------------------

bold=$(tput bold)
underline=$(tput sgr 0 1)
reset=$(tput sgr0)

purple=$(tput setaf 171)
red=$(tput setaf 1)
green=$(tput setaf 76)
tan=$(tput setaf 3)
blue=$(tput setaf 38)

#   ---------------------------------------------------------
# Headers and  Logging
#   ---------------------------------------------------------
# e_header "I am a sample script"
# e_success "I am a success message"
# e_error "I am an error message"
# e_warning "I am a warning message"
# e_underline "I am underlined text"
# e_bold "I am bold text"
# e_note "I am a note"
e_header() { printf "\n${bold}${purple}==========  %s  ==========${reset}\n" "$@" 
}
e_arrow() { printf "➜ $@\n"
}
e_success() { printf "${green}✔ %s${reset}\n" "$@"
}
e_error() { printf "${red}✖ %s${reset}\n" "$@"
}
e_warning() { printf "${tan}➜ %s${reset}\n" "$@"
}
e_underline() { printf "${underline}${bold}%s${reset}\n" "$@"
}
e_bold() { printf "${bold}%s${reset}\n" "$@"
}
e_note() { printf "${underline}${bold}${blue}Note:${reset}  ${blue}%s${reset}\n" "$@"
}


mcd () { mkdir -p "$1" && cd "$1"; }        # mcd:          Makes new Dir and jumps inside
#trash () { command mv "$@" ~/.Trash ; }     # trash:        Moves a file to the MacOS trash - installed the trash package in brew instead
ql () { qlmanage -p "$*" >& /dev/null; }    # ql:           Opens any file in MacOS Quicklook Preview

#   ---------------------------------------------------------
#   mans:   Search manpage given in agument '1' for term given in argument '2' (case insensitive)
#           displays paginated result with colored search terms and two lines surrounding each hit.             Example: mans mplayer codec
#   --------------------------------------------------------------------
mans () {
    man $1 | grep -iC2 --color=always $2 | less
}

#   ---------------------------------------------------------
#   showa: to remind yourself of an alias (given some part of it)
#   ------------------------------------------------------------
showaliases () { grep ^alias ~/.bash_profile | grep --color=always -i  $@ | grep -v '^\s*$' | less -FSRXc ;}
showprofile () { grep --color=always -i  $@ ~/.bash_profile | grep -v '^\s*$' | less -FSRXc ;}


#   ---------------------------------------------------------
#   FILE AND FOLDER MANAGEMENT
#   ---------------------------------------------------------

zipf () { zip -r "$1".zip "$1" ; }          # zipf:         To create a ZIP archive of a folder
getpath() { realpath "$1" | pbcopy; echo "`pbpaste` is in clipboard"; } # Get full path of file in clipboard

#   ---------------------------------------------------------
#   cdf:  'Cd's to frontmost window of MacOS Finder
#   ---------------------------------------------------------
cdf () {
    currFolderPath=$( /usr/bin/osascript <<EOT
        tell application "Finder"
            try
        set currFolder to (folder of the front window as alias)
            on error
        set currFolder to (path to desktop folder as alias)
            end try
            POSIX path of currFolder
        end tell
EOT
    )
    echo "cd to \"$currFolderPath\""
    ccd "$currFolderPath"
}

#   ---------------------------------------------------------
#   extract:  Extract most know archives with one command
#   ---------------------------------------------------------
extract () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

#   ---------------------------------------------------------
#   SEARCHING
#   ---------------------------------------------------------

ff () { /usr/bin/find . -name "$@" ; }      # ff:       Find file under the current directory
ffs () { /usr/bin/find . -name "$@"'*' ; }  # ffs:      Find file whose name starts with a given string
ffe () { /usr/bin/find . -name '*'"$@" ; }  # ffe:      Find file whose name ends with a given string

#   ---------------------------------------------------------
#   spotlight: Search for a file using MacOS Spotlight's metadata
#   -----------------------------------------------------------
spotlight () { mdfind "kMDItemDisplayName == '$@'wc"; }


#   ---------------------------------------------------------
#   PROCESS MANAGEMENT
#   ---------------------------------------------------------

#   ---------------------------------------------------------
#   findPid: find out the pid of a specified process
#   ---------------------------------------------------------
#       Note that the command name can be specified via a regex
#       E.g. findPid '/d$/' finds pids of all processes with names ending in 'd'
#       Without the 'sudo' it will only find processes of the current user
#   -----------------------------------------------------
findPid () { lsof -t -c "$@" ; }

#   ---------------------------------------------------------
#   my_ps: List processes owned by my user:
#   ---------------------------------------------------------
my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }


#   ---------------------------------------------------------
#   NETWORKING
#   ---------------------------------------------------------
#ip shows ip addresses for eth0, eth1 and external
function ip() {
    echo -e "Ethernet:\t `ipconfig getifaddr en1 2> /dev/null`"
    echo -e "WiFi:\t\t `ipconfig getifaddr en0 2> /dev/null`"
    echo -e "External:\t $myip"
}


#   ---------------------------------------------------------
#   SYSTEMS OPERATIONS & INFORMATION
#   ---------------------------------------------------------

#   ---------------------------------------------------------
#   ii:  display useful host related informaton
#   ---------------------------------------------------------
ii() {
    echo -e "\nYou are logged on ${RED}$HOST"
    echo -e "\nAdditionnal information:$NC " ; uname -a
    echo -e "\n${RED}Users logged on:$NC " ; w -h
    echo -e "\n${RED}Current date :$NC " ; date
    echo -e "\n${RED}Machine stats :$NC " ; uptime
    echo -e "\n${RED}Current network location :$NC " ; scselect
    echo -e "\n${RED}Public facing IP Address :$NC " ;myip
    #echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
    echo
}


#   ---------------------------------------------------------
#   WEB DEVELOPMENT
#   ---------------------------------------------------------

httpHeaders () { /usr/bin/curl -I -L $@ ; }             # httpHeaders:      Grabs headers from web page
#   httpDebug:  Download a web page and show info on what took time
#   ---------------------------------------------------------
httpDebug () { /usr/bin/curl $@ -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\n" ; }

#   ---------------------------------------------------------
#   VIRTUAL ENV
#   ---------------------------------------------------------
won() { workon "$1"; cdvirtualenv "$1"; }


#   ---------------------------------------------------------
#   PIP
#   ---------------------------------------------------------

#Since we made pip require virtual env, creating an alias gpip to override
gpip(){
   PIP_REQUIRE_VIRTUALENV="" pip "$@"
}


#   ---------------------------------------------------------
#   Utilities
#   ---------------------------------------------------------
seek_confirmation() {
  printf "\n${bold}$@${reset}"
  read -p " (y/n) " -n 1
  printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
is_confirmed() {
if [[ "$REPLY" =~ ^[Yy]$ ]]; then
  return 0
fi
return 1
}

# Usage:
# seek_confirmation "Do you want to print a success message?"
# if is_confirmed; then
#   e_success "Here is a success message"
# else
#   e_error "You did not ask for a success message"
# fi

if [ -f "$HOME/.fzf-functions" ]; then
  source $HOME/.fzf-functions
fi

